#!/usr/bin/env python3
"""
VPN Bot Panel - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π Telegram –±–æ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π
"""

import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler
from telegram.ext import ContextTypes

from app.database import Database, UserRole
from app.config import Config
from app.xui_api import XUIAPIManager
from app.payment import PaymentManager

class VPNBot:
    def __init__(self):
        self.config = Config()
        self.db = Database()
        self.api_manager = XUIAPIManager(self.db)
        self.payment_manager = PaymentManager(self.db, self.config)
        self.token = self.config.get_bot_token()
        
        if not self.token or self.token == 'YOUR_BOT_TOKEN_HERE':
            logging.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ config.ini")
            raise ValueError("Bot token not configured")
        
        self.application = Application.builder().token(self.token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("balance", self.balance))
        self.application.add_handler(CommandHandler("tariffs", self.show_tariffs))
        self.application.add_handler(CommandHandler("mysubscriptions", self.my_subscriptions))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.application.add_handler(CommandHandler("admin", self.admin_panel))
        self.application.add_handler(CommandHandler("moderator", self.moderator_panel))
        self.application.add_handler(CommandHandler("stats", self.show_stats))
        
        # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        self.application.add_handler(CommandHandler("addserver", self.add_server))
        self.application.add_handler(CommandHandler("servers", self.list_servers))
        self.application.add_handler(CommandHandler("sync", self.sync_servers))
        self.application.add_handler(CommandHandler("addmoderator", self.add_moderator))
        self.application.add_handler(CommandHandler("ban", self.ban_user))
        self.application.add_handler(CommandHandler("unban", self.unban_user))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        self.application.add_handler(CommandHandler("free", self.create_free_connection))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern="^tariff_"))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern="^payment_"))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern="^admin_"))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern="^moderator_"))
        self.application.add_handler(CallbackQueryHandler(self.button_handler, pattern="^server_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.create_user(user.id, user.username, user.full_name)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        self.db.log_action(user.id, 'start_bot')
        
        role = self.db.get_user_role(user.id)
        
        if role == UserRole.SUPER_ADMIN.value:
            await self._show_super_admin_panel(update, user)
        elif role == UserRole.ADMIN.value:
            await self._show_admin_panel(update, user)
        elif role == UserRole.MODERATOR.value:
            await self._show_moderator_panel(update, user)
        else:
            await self._show_user_panel(update, user)
    
    async def _show_super_admin_panel(self, update, user):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        welcome_text = f"""
üëë **–ü—Ä–∏–≤–µ—Ç, {user.full_name}!**

–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **–°—É–ø–µ—Ä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** —Å–∏—Å—Ç–µ–º—ã.

**–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ 3x-ui
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–∞–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/admin - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/addserver - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä 3x-ui
/addmoderator - –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/free - –°–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""
        
        keyboard = [
            [KeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")],
            [KeyboardButton("üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"), KeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_admin_panel(self, update, user):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        welcome_text = f"""
üõ°Ô∏è **–ü—Ä–∏–≤–µ—Ç, {user.full_name}!**

–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** —Å–∏—Å—Ç–µ–º—ã.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ 3x-ui
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –±–∞–Ω–æ–≤ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/addserver - –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä 3x-ui
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
/free - –°–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""
        
        keyboard = [
            [KeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")],
            [KeyboardButton("üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"), KeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å")],
            [KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_moderator_panel(self, update, user):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        welcome_text = f"""
üîß **–ü—Ä–∏–≤–µ—Ç, {user.full_name}!**

–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä** —Å–∏—Å—Ç–µ–º—ã.

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –Ω–∞–≥—Ä—É–∑–∫–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–±–∞–Ω/—Ä–∞–∑–±–∞–Ω)
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/moderator - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
/free - –°–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
"""
        
        keyboard = [
            [KeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")],
            [KeyboardButton("üîß –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def _show_user_panel(self, update, user):
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        welcome_text = f"""
üëã **–ü—Ä–∏–≤–µ—Ç, {user.full_name}!**

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN Bot Panel!

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ü–æ–∫—É–ø–∫–∞ VPN —Ç–∞—Ä–∏—Ñ–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏
‚Ä¢ –°–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/tariffs - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∫—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã
/mysubscriptions - –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help
"""
        
        keyboard = [
            [KeyboardButton("üí∞ –¢–∞—Ä–∏—Ñ—ã"), KeyboardButton("üìä –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")],
            [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ]
        
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def admin_panel(self, update: Update, context: CallbackContext) -> None:
        """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        
        if not self.db.is_admin(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        stats = self.db.get_system_statistics()
        
        text = "üëë **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n"
        text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**\n"
        text += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        text += f"   üë§ –û–±—ã—á–Ω—ã–µ: {stats['regular_users']}\n"
        text += f"   üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {stats['moderators']}\n"
        text += f"   üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {stats['admins']}\n"
        text += f"   üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–æ–≤: {stats['active_servers']}\n"
        text += f"   üì° –ü–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}\n"
        text += f"   üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {stats['total_revenue']:.2f} ‚ÇΩ\n\n"
        
        text += "**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π:**"
        
        keyboard = [
            [InlineKeyboardButton("üñ•Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏", callback_data="admin_servers")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users")],
            [InlineKeyboardButton("üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞–º–∏", callback_data="admin_tariffs")],
            [InlineKeyboardButton("üîß –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin_add_moderator")],
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        ]
        
        if self.db.get_user_role(user.id) == UserRole.SUPER_ADMIN.value:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def moderator_panel(self, update: Update, context: CallbackContext) -> None:
        """–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        
        if not self.db.is_moderator(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        stats = self.db.get_system_statistics()
        
        text = "üîß **–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞**\n\n"
        text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        text += f"   üñ•Ô∏è –°–µ—Ä–≤–µ—Ä–æ–≤: {stats['active_servers']}\n"
        text += f"   üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}\n\n"
        
        text += "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**"
        
        keyboard = [
            [InlineKeyboardButton("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="moderator_servers")],
            [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="moderator_users")],
            [InlineKeyboardButton("üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—É—é —Å—Å—ã–ª–∫—É", callback_data="moderator_ads")],
            [InlineKeyboardButton("üéÅ –ú–æ–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data="moderator_free")],
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def add_moderator(self, update: Update, context: CallbackContext) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user = update.effective_user
        
        if self.db.get_user_role(user.id) != UserRole.SUPER_ADMIN.value:
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        if context.args and len(context.args) >= 1:
            try:
                target_user_id = int(context.args[0])
                target_username = context.args[1] if len(context.args) > 1 else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                moderator_settings = (
                    5,  # max_free_connections
                    False,  # can_manage_servers
                    False,  # can_manage_tariffs
                    True,   # can_manage_users
                    True,   # can_create_ads
                    True,   # can_ban_users
                    True    # requires_approval
                )
                
                self.db.update_user_role(target_user_id, UserRole.MODERATOR.value, moderator_settings)
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} (ID: {target_user_id}) –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
                    f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:**\n"
                    f"‚Ä¢ –ú–∞–∫—Å. –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: 5\n"
                    f"‚Ä¢ –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: –î–∞\n"
                    f"‚Ä¢ –ú–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É: –î–∞\n"
                    f"‚Ä¢ –ú–æ–∂–µ—Ç –±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –î–∞\n"
                    f"‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏–µ: –î–∞",
                    parse_mode='Markdown'
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                self.db.log_action(user.id, 'add_moderator', f'–ù–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä {target_user_id}')
                
            except (ValueError, IndexError):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addmoderator USER_ID [USERNAME]\n"
                    "–ü—Ä–∏–º–µ—Ä: /addmoderator 123456789 JohnDoe"
                )
        else:
            await update.message.reply_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞**\n\n"
                "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
                "`/addmoderator USER_ID [USERNAME]`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/addmoderator 123456789 –ò–≤–∞–Ω–ò–≤–∞–Ω–æ–≤`",
                parse_mode='Markdown'
            )
    
    async def create_free_connection(self, update: Update, context: CallbackContext) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        user = update.effective_user
        
        if not self.db.can_create_free_connection(user.id):
            await update.message.reply_text(
                "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
            )
            return
        
        custom_name = None
        if context.args:
            custom_name = ' '.join(context.args)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        subscription_id, config_data = self.api_manager.create_user_subscription(
            user.id, 
            custom_name=custom_name, 
            is_free=True
        )
        
        if subscription_id:
            await update.message.reply_text(
                f"‚úÖ **–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!**\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {custom_name or '–ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'}\n"
                f"**–°—Ä–æ–∫:** 1 –≥–æ–¥\n"
                f"**–¢—Ä–∞—Ñ–∏–∫:** 100 GB\n\n"
                f"**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
                f"```\n{config_data}\n```\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –≤–∞—à–µ–º VPN –∫–ª–∏–µ–Ω—Ç–µ.",
                parse_mode='Markdown'
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            self.db.log_action(user.id, 'create_free_connection', f'–°–æ–∑–¥–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {subscription_id}')
        else:
            await update.message.reply_text(
                f"‚ùå **–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**\n\n{config_data}",
                parse_mode='Markdown'
            )
    
    async def ban_user(self, update: Update, context: CallbackContext) -> None:
        """–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        if not self.db.is_moderator(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        
        if context.args and len(context.args) >= 2:
            try:
                target_user_id = int(context.args[0])
                reason = ' '.join(context.args[1:])
                is_global = self.db.is_admin(user.id)  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ
                
                if is_global:
                    success, message = self.api_manager.ban_user_globally(target_user_id, user.id, reason)
                else:
                    # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –±–∞–Ω–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ
                    servers = self.db.get_servers(user.id)
                    if servers:
                        success, message = self.api_manager.ban_user_on_server(target_user_id, servers[0]['id'], user.id, reason)
                    else:
                        success, message = False, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω**\n\n"
                        f"**ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:** {target_user_id}\n"
                        f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
                        f"**–¢–∏–ø –±–∞–Ω–∞:** {'–ì–ª–æ–±–∞–ª—å–Ω—ã–π' if is_global else '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ'}\n"
                        f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** {message}",
                        parse_mode='Markdown'
                    )
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    self.db.log_action(user.id, 'ban_user', f'–ó–∞–±–∞–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id}: {reason}')
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {message}")
                
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            await update.message.reply_text(
                "üìù **–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n"
                "`/ban USER_ID –ü–†–ò–ß–ò–ù–ê`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/ban 123456789 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª`",
                parse_mode='Markdown'
            )
    
    async def button_handler(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user = query.from_user
        
        if data.startswith('tariff_'):
            tariff_id = int(data.split('_')[1])
            await self.process_tariff_purchase(query, tariff_id)
        
        elif data.startswith('admin_'):
            action = data.split('_')[1]
            await self.handle_admin_action(query, action)
        
        elif data.startswith('moderator_'):
            action = data.split('_')[1]
            await self.handle_moderator_action(query, action)
    
    async def handle_admin_action(self, query, action):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user = query.from_user
        
        if not self.db.is_admin(user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if action == 'servers':
            servers = self.db.get_servers(user.id)
            text = "üñ•Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏**\n\n"
            
            for server in servers:
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if server['is_active'] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                load = f"{server['current_users']}/{server['max_users']}"
                text += f"üîπ **{server['name']}** ({server['location']})\n"
                text += f"   üìç {server['url']}\n"
                text += f"   üë§ –ù–∞–≥—Ä—É–∑–∫–∞: {load}\n"
                text += f"   üö¶ –°—Ç–∞—Ç—É—Å: {status}\n\n"
            
            keyboard = [[InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ", callback_data="admin_sync_all")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif action == 'add_moderator':
            await query.edit_message_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "`/addmoderator USER_ID [USERNAME]`\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "`/addmoderator 123456789 –ò–≤–∞–Ω–ò–≤–∞–Ω–æ–≤`\n\n"
                "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø–æ–ª—É—á–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π.",
                parse_mode='Markdown'
            )
    
    async def handle_moderator_action(self, query, action):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        user = query.from_user
        
        if not self.db.is_moderator(user.id):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if action == 'servers':
            servers = self.db.get_servers(user.id)
            text = "üìà **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤**\n\n"
            
            for server in servers:
                load_percent = (server['current_users'] / server['max_users']) * 100
                status_icon = "üü¢" if load_percent < 80 else "üü°" if load_percent < 95 else "üî¥"
                
                text += f"{status_icon} **{server['name']}**\n"
                text += f"   üìç {server['location']}\n"
                text += f"   üë§ {server['current_users']}/{server['max_users']} ({load_percent:.1f}%)\n"
                text += f"   üïí –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {server['last_sync'] or '–ù–∏–∫–æ–≥–¥–∞'}\n\n"
            
            await query.edit_message_text(text, parse_mode='Markdown')
    
    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        user = update.effective_user
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        if text == "üí∞ –¢–∞—Ä–∏—Ñ—ã":
            await self.show_tariffs(update, context)
        elif text == "üìä –ú–æ–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è":
            await self.my_subscriptions(update, context)
        elif text == "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
            await self.admin_panel(update, context)
        elif text == "üõ°Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å":
            await self.admin_panel(update, context)
        elif text == "üîß –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞":
            await self.moderator_panel(update, context)
        elif text == "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å":
            await self.sync_servers(update, context)
        elif text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.show_stats(update, context)
        elif text == "üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ":
            await self.create_free_connection(update, context)
        elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
            await self.help(update, context)
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (show_tariffs, my_subscriptions, add_server, list_servers, sync_servers, show_stats, help, balance)
    # –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ VPN Bot —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–æ–ª–µ–π...")
        print("ü§ñ VPN Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        try:
            self.application.run_polling()
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            raise