#!/bin/bash

set -e

echo "üöÄ –ó–∞–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VPN Bot Panel..."

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

check_root() {
    if [[ $EUID -eq 0 ]]; then
        log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: root"
    else
        log_error "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root"
        log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo $0"
        exit 1
    fi
}

check_python() {
    if command -v python3 &>/dev/null; then
        PYTHON_VERSION=$(python3 -c "import sys; print('.'.join(map(str, sys.version_info[:2])))")
        log_success "Python $PYTHON_VERSION –Ω–∞–π–¥–µ–Ω"
    else
        log_error "Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
}

install_system_packages() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    
    if command -v apt &>/dev/null; then
        apt update
        apt install -y python3-venv python3-pip git sqlite3
    elif command -v yum &>/dev/null; then
        yum install -y python3-virtualenv python3-pip git sqlite
    elif command -v dnf &>/dev/null; then
        dnf install -y python3-virtualenv python3-pip git sqlite
    else
        log_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
    fi
}

setup_venv() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        log_success "–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
    fi
    
    source venv/bin/activate
}

install_dependencies() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    pip install --upgrade pip
    pip install -r requirements.txt
    
    log_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

setup_directories() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    mkdir -p app scripts templates static/css static/js data logs backups
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

setup_database() {
    log_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    source venv/bin/activate
    python3 -c "
from app.database import Database
db = Database()
db.init_db()
print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
"
}

setup_super_admin() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    
    read -p "–í–≤–µ–¥–∏—Ç–µ Telegram ID —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " telegram_id
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [admin]: " username
    username=${username:-admin}
    
    source venv/bin/activate
    python3 -c "
from app.database import Database, UserRole
db = Database()

# –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
db.create_user($telegram_id, '$username', 'System Administrator', UserRole.SUPER_ADMIN.value)
print('‚úÖ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω')
print(f'   üë§ –ò–º—è: $username')
print(f'   üì± Telegram ID: $telegram_id')
print(f'   üëë –†–æ–ª—å: –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
"
}

setup_payment_config() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º..."
    
    echo ""
    echo "üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å Enter):"
    
    # YooMoney
    read -p "YooMoney Shop ID: " yoomoney_shop_id
    read -p "YooMoney Secret Key: " yoomoney_secret_key
    
    # CryptoBot
    read -p "CryptoBot API Token: " cryptobot_token
    read -p "CryptoBot Shop ID: " cryptobot_shop_id
    
    source venv/bin/activate
    python3 -c "
from app.config import Config
config = Config()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
current_config = config.load_config()

# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
if '$yoomoney_shop_id':
    current_config['PAYMENTS']['yoomoney_shop_id'] = '$yoomoney_shop_id'
if '$yoomoney_secret_key':
    current_config['PAYMENTS']['yoomoney_secret_key'] = '$yoomoney_secret_key'
if '$cryptobot_token':
    current_config['PAYMENTS']['cryptobot_token'] = '$cryptobot_token'
if '$cryptobot_shop_id':
    current_config['PAYMENTS']['cryptobot_shop_id'] = '$cryptobot_shop_id'

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥
with open('config.ini', 'w') as f:
    current_config.write(f)

print('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
"
}

setup_bot_config() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞..."
    
    read -p "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞: " bot_token
    read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –≤–µ–±-–ø–∞–Ω–µ–ª–∏ [5000]: " web_port
    web_port=${web_port:-5000}
    read -p "–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É (y/N): " debug_mode
    debug_mode=${debug_mode:-n}
    
    source venv/bin/activate
    python3 -c "
from app.config import Config
config = Config()
config.create_default_config()

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
import configparser
config_parser = configparser.ConfigParser()
config_parser.read('config.ini')

if '$bot_token':
    config_parser['BOT']['token'] = '$bot_token'
if '$web_port':
    config_parser['WEB']['port'] = '$web_port'

config_parser['WEB']['debug'] = '$( [ \"$debug_mode\" = \"y\" ] && echo \"True\" || echo \"False\" )'

with open('config.ini', 'w') as f:
    config_parser.write(f)

print('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
"
}

set_secure_permissions() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º–∏
    chmod +x run.py scripts/*.sh
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    chmod 600 config.ini 2>/dev/null || true
    chmod 600 data/vpn_bot.db 2>/dev/null || true
    
    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –º–µ–Ω—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –Ω–∞ root
    chown -R root:root .
    
    log_success "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
}

create_systemd_service() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
    
    local service_file="/etc/systemd/system/vpn-bot-panel.service"
    local working_dir=$(pwd)
    
    cat > "$service_file" << EOF
[Unit]
Description=VPN Bot Panel
After=network.target
Requires=network.target

[Service]
Type=simple
User=root
Group=root
WorkingDirectory=$working_dir
Environment=PYTHONPATH=$working_dir
ExecStart=$working_dir/venv/bin/python3 run.py
Restart=always
RestartSec=3
StandardOutput=journal
StandardError=journal

# Security
NoNewPrivileges=yes
PrivateTmp=yes
ProtectSystem=strict
ProtectHome=yes
ReadWritePaths=$working_dir/data $working_dir/logs
ReadOnlyPaths=$working_dir

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable vpn-bot-panel.service
    
    log_success "Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω"
}

setup_backup_cron() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞..."
    
    local backup_script="/usr/local/bin/vpn-panel-backup.sh"
    
    cat > "$backup_script" << 'EOF'
#!/bin/bash
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø VPN Bot Panel

BACKUP_DIR="/opt/vpn-bot-panel/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="$BACKUP_DIR/backup_$DATE.tar.gz"

mkdir -p $BACKUP_DIR

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
tar -czf $BACKUP_FILE \
    --exclude='venv' \
    --exclude='*.log' \
    --exclude='*.pyc' \
    --exclude='__pycache__' \
    /opt/vpn-bot-panel/

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Ö—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7)
find $BACKUP_DIR -name "backup_*.tar.gz" -type f -mtime +7 -delete

echo "Backup created: $BACKUP_FILE"
EOF

    chmod +x $backup_script
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ cron (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 3:00)
    (crontab -l 2>/dev/null; echo "0 3 * * * $backup_script") | crontab -
    
    log_success "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

show_final_instructions() {
    echo ""
    log_success "üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    log_info "üõ°Ô∏è  –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:"
    echo "  ‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞—â–∏—â–µ–Ω—ã (—Ç–æ–ª—å–∫–æ root)"
    echo "  ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∞"
    echo "  ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"
    echo "  ‚Ä¢ Systemd —Å–µ—Ä–≤–∏—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏"
    echo ""
    log_info "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:"
    echo "  python3 run.py                          # –ó–∞–ø—É—Å–∫ –≤—Ä—É—á–Ω—É—é"
    echo "  sudo systemctl start vpn-bot-panel      # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ systemd"
    echo ""
    log_info "üëë –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ:"
    echo "  –í–µ–±-–ø–∞–Ω–µ–ª—å: http://localhost:$(grep -oP 'port\s*=\s*\K\d+' config.ini 2>/dev/null || echo 5000)"
    echo "  –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: Telegram ID $(grep -oP 'admin_telegram_id\s*=\s*\K\d+' config.ini 2>/dev/null || echo '–Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —É—Å—Ç–∞–Ω–æ–≤–∫–µ')"
    echo ""
    log_info "üîß –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    echo "  sudo systemctl status vpn-bot-panel     # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
    echo "  sudo systemctl restart vpn-bot-panel    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"
    echo "  sudo ./scripts/update.sh                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ"
    echo ""
    log_info "üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "  1. –î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã 3x-ui —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (/addserver)"
    echo "  2. –ù–∞–∑–Ω–∞—á—å—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (/addmoderator)"
    echo "  3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–∞—Ä–∏—Ñ—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø–∞–Ω–µ–ª—å"
    echo "  4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—É"
    echo ""
}

main() {
    log_info "–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VPN Bot Panel..."
    
    check_root
    check_python
    install_system_packages
    setup_venv
    install_dependencies
    setup_directories
    setup_database
    setup_super_admin
    setup_payment_config
    setup_bot_config
    set_secure_permissions
    create_systemd_service
    setup_backup_cron
    show_final_instructions
}

main "$@"